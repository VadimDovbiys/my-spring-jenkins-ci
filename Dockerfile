# Використання базового образу (основи для нашого образу)
# FROM - визначає базовий образ. openjdk:17-jdk-slim-buster - це офіційний образ OpenJDK 17
# з Debian Buster (buster) і зменшеним розміром (slim), тільки з JDK.
# Це дає нам середовище Java, необхідне для запуску Spring Boot.
FROM openjdk:17-jdk-slim-buster

# Встановлення робочої директорії всередині контейнера
# WORKDIR - встановлює робочу директорію для наступних інструкцій (RUN, CMD, ENTRYPOINT, COPY, ADD).
# Якщо директорії не існує, вона буде створена.
WORKDIR /app

# Копіювання збудованого JAR-файлу з вашої локальної файлової системи до контейнера
# COPY [джерело] [призначення]
# target/*.jar - Це означає "будь-який файл, що закінчується на .jar" у папці 'target' вашого проекту.
#               Maven пакує ваш додаток у JAR-файл у папці 'target'.
#               За замовчуванням, ім'я файлу буде `demo-0.0.1-SNAPSHOT.jar` (як у pom.xml).
#               Ми рекомендуємо використовувати `app.jar` як кінцеву назву.
# app.jar - Це ім'я, під яким JAR-файл буде збережений у контейнері.
# *** ВАЖЛИВО: Переконайтеся, що ваш JAR-файл дійсно називається `app.jar` після збірки Maven! ***
# Якщо ви не додали `<finalName>app</finalName>` до `pom.xml` (як я згадував раніше),
# то вам, можливо, доведеться змінити `target/*.jar` на `target/demo-0.0.1-SNAPSHOT.jar`
# АБО додати `<finalName>app</finalName>` у ваш pom.xml (що краще).
COPY target/app.jar app.jar

# Відкриття порту, на якому працює Spring Boot додаток
# EXPOSE - інформує Docker, що контейнер слухатиме вказані мережеві порти під час виконання.
# Це документація, а не фактичне відкриття порту на хості. Порт 8080 - стандартний для Spring Boot.
EXPOSE 8080

# Команда для запуску вашого Spring Boot додатку
# ENTRYPOINT - налаштовує команду, яка буде виконуватися, коли контейнер запускається.
# Використання форми `exec` (з масивом рядків) є кращим, оскільки це дозволяє SIGTERM сигнали.
# ["java", "-jar", "app.jar"] - це стандартна команда для запуску JAR-файлу Java.
ENTRYPOINT ["java", "-jar", "app.jar"]